setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
b<-retro_acl(1,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
data.CatL=cl
data.wgt=wgt
data.mat=mat
rec.age=1
nage=7
M=0
sel_L50=27
sel_L95=36
results <- data.frame(Year = integer(), Variable = character(), Value = numeric(), RetrospectiveYear = integer(), Rho = numeric())
# Get the results of the full data model first
model_result <- run_acl(data.CatL = data.CatL,
data.wgt = data.wgt,
data.mat = data.mat,
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
# Extracting complete year data
year <- model_result[["year"]]
# Extracts complete B, SSB, Rec and N data
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Save the complete result to data.frame
for (variable_name in names(variables)) {
temp_full <- data.frame(Year = year,
Variable = rep(variable_name, each = length(year)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(tail(year, 1), length(year)),
Rho = rep(NA, length(year)))  # Rho值对于完整数据集为NA
results <- rbind(results, temp_full)
}
View(results)
year2=1991:2010
results$Year
results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
View(variables)
variables[[variable_name]]
length(variables[[variable_name]]
)
original_values
# Extracts the original data for the same year as the backtracked data
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
length(original_values)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
results <- data.frame(Year = integer(), Variable = character(), Value = numeric(), RetrospectiveYear = integer(), Rho = numeric())
# Get the results of the full data model first
model_result <- run_acl(data.CatL = data.CatL,
data.wgt = data.wgt,
data.mat = data.mat,
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
# Extracting complete year data
year <- model_result[["year"]]
# Extracts complete B, SSB, Rec and N data
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Save the complete result to data.frame
for (variable_name in names(variables)) {
temp_full <- data.frame(Year = year,
Variable = rep(variable_name, each = length(year)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(tail(year, 1), length(year)),
Rho = rep(NA, length(year)))  # Rho值对于完整数据集为NA
results1 <- rbind(results, temp_full)
}
View(results1)
results1 <- data.frame(Year = integer(), Variable = character(), Value = numeric(), RetrospectiveYear = integer(), Rho = numeric())
# Get the results of the full data model first
model_result <- run_acl(data.CatL = data.CatL,
data.wgt = data.wgt,
data.mat = data.mat,
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
# Extracting complete year data
year <- model_result[["year"]]
# Extracts complete B, SSB, Rec and N data
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Save the complete result to data.frame
for (variable_name in names(variables)) {
temp_full <- data.frame(Year = year,
Variable = rep(variable_name, each = length(year)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(tail(year, 1), length(year)),
Rho = rep(NA, length(year)))  # Rho值对于完整数据集为NA
results1 <- rbind(results1, temp_full)
}
View(results1)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
original_values <- results1[results1$Year %in% year2 & results1$Variable == variable_name, "Value"]
original_values
for (variable_name in names(variables)) {
# Extracts the original data for the same year as the backtracked data
original_values <- results1[results1$Year %in% year2 & results1$Variable == variable_name, "Value"]
# Calculate rho value
if(length(variables[[variable_name]]) != length(original_values)){
# Before extracting original_values
print(head(results1[results1$Year %in% year2 & results1$Variable == variable_name, ]))
print(paste("Processing year: ", year2))
print(paste("Length of variables[[variable_name]]: ", length(variables[[variable_name]])))
print(paste("Length of original_values: ", length(original_values)))
stop("Vectors are not of the same length.")
} else {
# Use Mohn's rho instead of correlation
rho <- mean((variables[[variable_name]] - original_values) / original_values)
}
# Save the results to data.frame
temp <- data.frame(Year = year2,
Variable = rep(variable_name, each = length(year2)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(retrospectiveYear, length(year2)),
Rho = rep(rho, length(year2)))
results <- rbind(results1, temp)
}
nyear=2
for (i in 1:(nyear)) {
# Calculate the required year data
year1 = ncol(data.CatL) - i
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
year2 <- model_result[["year"]]
# Extracting the last year's parameter values
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Year of retrospective analysis extracted
retrospectiveYear <- tail(model_result[["year"]], 1)
# For each variable, calculate the rho value and save the result to data.frame
for (variable_name in names(variables)) {
# Extracts the original data for the same year as the backtracked data
original_values <- results1[results1$Year %in% year2 & results1$Variable == variable_name, "Value"]
# Calculate rho value
if(length(variables[[variable_name]]) != length(original_values)){
# Before extracting original_values
print(head(results1[results1$Year %in% year2 & results1$Variable == variable_name, ]))
print(paste("Processing year: ", year2))
print(paste("Length of variables[[variable_name]]: ", length(variables[[variable_name]])))
print(paste("Length of original_values: ", length(original_values)))
stop("Vectors are not of the same length.")
} else {
# Use Mohn's rho instead of correlation
rho <- mean((variables[[variable_name]] - original_values) / original_values)
}
# Save the results to data.frame
temp <- data.frame(Year = year2,
Variable = rep(variable_name, each = length(year2)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(retrospectiveYear, length(year2)),
Rho = rep(rho, length(year2)))
results <- rbind(results1, temp)
}
}
View(results)
for (i in 1:(nyear)) {
# Calculate the required year data
year1 = ncol(data.CatL) - i
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
year2 <- model_result[["year"]]
# Extracting the last year's parameter values
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Year of retrospective analysis extracted
retrospectiveYear <- tail(model_result[["year"]], 1)
# For each variable, calculate the rho value and save the result to data.frame
for (variable_name in names(variables)) {
# Extracts the original data for the same year as the backtracked data
original_values <- results1[results1$Year %in% year2 & results1$Variable == variable_name, "Value"]
# Calculate rho value
if(length(variables[[variable_name]]) != length(original_values)){
# Before extracting original_values
print(head(results1[results1$Year %in% year2 & results1$Variable == variable_name, ]))
print(paste("Processing year: ", year2))
print(paste("Length of variables[[variable_name]]: ", length(variables[[variable_name]])))
print(paste("Length of original_values: ", length(original_values)))
stop("Vectors are not of the same length.")
} else {
# Use Mohn's rho instead of correlation
rho <- mean((variables[[variable_name]] - original_values) / original_values)
}
# Save the results to data.frame
temp <- data.frame(Year = year2,
Variable = rep(variable_name, each = length(year2)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(retrospectiveYear, length(year2)),
Rho = rep(rho, length(year2)))
results <- rbind(results, temp)
}
}
View(results)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
b<-retro_acl(3,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
plot_biomass(a)
plot_biomass(a,type=B)
plot_biomass(a,type="B")
?plot_abundance
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
rec.age = 1
nage= 7
M=0
sel_L50 = 27
sel_L95=36
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
library(ACL)
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
?plot_abundance
results_list=a
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
results_list=a
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
plot_abundance(results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid")
plot_abundance(results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T)
plot_abundance(results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T)
plot_abundance(results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = 5)
if (output) {
# Check for the existence of subfolder "output"
if (!dir.exists("output")) {
dir.create("output")
}
}
output=F
if (output) {
# Check for the existence of subfolder "output"
if (!dir.exists("output")) {
dir.create("output")
}}
dir.exists
dir()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png")
if (!dir.exists("output")) {
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
png(filename="output/plot_abundance_N.png")
plot_abundance(results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T)
dev.off()
plot_residuals(a)
plot_residuals(a,type="length")
plot_abundance(a,type="NL",facet_ncol = NULL)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", res = 300)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", width = 800, res = 300)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", width = 1600, res = 300)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", width = 1600, height = 1200,res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", width = 2400, height = 1800,res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png", width = 3200, height = 1800,res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png", width = 3200, height = 1800,res = 600)
plot_abundance(results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NA.png",width = 12, height = 8, units = "in", res = 300)
plot_abundance(results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 300)
plot_abundance(results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
dev.off()
dev.off()
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", line_type = "solid")
dev.off()
?plot_abundance
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600,se=T)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
library(ACL)
library(ACL)
plot_abundance(a,type=NL)
plot_abundance(a,type="NL")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
a
library(ACL)
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
plot_abundance(results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = T)
dev.off()
?plot_abundance
library(ACL)
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = T)
a
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = T)
library(ACL)
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = T)
View(a)
?nlminb
