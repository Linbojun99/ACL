upper = ss_rec[, "Estimate"] + 1.96 * ss_rec[, "Std. Error"]
)
View(confidence_intervals_rec)
confidence_intervals_rec$Year <- cl_l %>%
dplyr::mutate(Year = as.numeric(gsub("X", "", Year))) %>%
dplyr::distinct(Year) %>%
dplyr::pull(Year)
View(confidence_intervals_rec)
cl_l %>%
dplyr::mutate(Year = as.numeric(gsub("X", "", Year))) %>%
dplyr::distinct(Year) %>%
dplyr::pull(Year)
ggplot2::ggplot(confidence_intervals_rec, aes(x = Year, y = recruitment)) +
ggplot2::geom_line(size = line_size, color = line_color, linetype = line_type) +
ggplot2::labs(x = "Year", y = "Recruitment", title = "Recruitment Over Years") +
ggplot2::theme_minimal()
ggplot2::ggplot(confidence_intervals_rec, aes(x = Year, y = recruitment)) +
ggplot2::geom_line() +
ggplot2::labs(x = "Year", y = "Recruitment", title = "Recruitment Over Years") +
ggplot2::theme_minimal()
View(confidence_intervals_rec)
ggplot2::ggplot(confidence_intervals_rec, aes(x = Param, y = estimate)) +
ggplot2:: geom_line(linewidth=line_size, color = line_color, linetype = line_type) +
ggplot2::geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
ggplot2::labs(y = "Recruitment", x = "Year", title = "Recruitment Over Years")+
ggplot2::theme_minimal()
ggplot2::ggplot(confidence_intervals_rec, aes(x = Param, y = estimate)) +
ggplot2:: geom_line() +
ggplot2::geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
ggplot2::labs(y = "Recruitment", x = "Year", title = "Recruitment Over Years")+
ggplot2::theme_minimal()
ggplot2::ggplot(confidence_intervals_rec, aes(x = Year, y = estimate)) +
ggplot2:: geom_line() +
ggplot2::geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +
ggplot2::labs(y = "Recruitment", x = "Year", title = "Recruitment Over Years")+
ggplot2::theme_minimal()
library(ALSCL)
plot_recruitment(a,cl)
plot_recruitment(a,cl,se=T)
plot_recruitment(a,cl,se=T)+theme_bw()
a<-run_acl(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid,len_border=len_border)
ss_bio <- model_result[["ss"]][grep("B", rownames(model_result[["ss"]])),]
View(ss_bio)
ss_bio <- model_result[["ss"]][grep("^B", rownames(model_result[["ss"]])),]
View(ss_bio)
# Calculate confidence intervals
confidence_intervals_bio <- data.frame(
estimate = ss_bio[, "Estimate"],
lower = ss_bio[, "Estimate"] - 1.96 * ss_bio[, "Std. Error"],
upper = ss_bio[, "Estimate"] + 1.96 * ss_bio[, "Std. Error"]
)
View(confidence_intervals_bio)
confidence_intervals_bio$Year <- cl_l %>%
dplyr::mutate(Year = as.numeric(gsub("X", "", Year))) %>%
dplyr::distinct(Year) %>%
dplyr::pull(Year)
View(confidence_intervals_bio)
plot_biomass(a,cl)
library(ALSCL)
library(ALSCL,se=T)
plot_biomass(a,cl,se=T)
plot_recruitment(a,cl,se=T)
plot_biomass(a,cl,se=T)
library(ALSCL)
plot_biomass(a,cl,se=T)
plot_recruitment(a,cl,se=T)
plot_recruitment(a,cl,se=T)+theme_classic()
plot_recruitment(a,cl,se=T)+theme_get()
plot_recruitment(a,cl,se=T)+theme_linedraw()
plot_recruitment(a,cl,se=T)+theme_light()
plot_recruitment(a,cl,se=T)+theme_test()
plot_fishing_mortality(a,cl)
View(wgt)
View(sdresult)
sdresult[["cov"]]
View(ss)
year <- cl_l %>%
dplyr::mutate(Year = as.numeric(gsub("X", "", Year))) %>%
dplyr::distinct(Year) %>%
dplyr::pull(Year)
library(ALSCL)
a<-run_acl(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid,len_border=len_border)
View(a)
library(ALSCL)
plot_fishing_mortality(a)
plot_recruitment(a)
plot_OP(a,cl)
model_result=a
# Extract the F data
F<- model_result[["report"]][["F"]]
# Create Year variable from column names of F (assuming columns are years)
Year <- model_result[["year"]]
# Create AgeGroup variable from row names of F
AgeGroup <- paste0("Age group ", seq_len(nrow(F)))
# Convert matrix to data frame in long format
F_long <- reshape2::melt(F)
colnames(F_long) <- c("AgeGroup", "Year", "F")
F_long$Year <- Year[as.numeric(F_long$Year)]
F_long$AgeGroup <- AgeGroup[as.numeric(F_long$AgeGroup)]
View(F_long)
View(a)
ss_rec <- model_result[["est_std"]][grep("Rec", rownames(model_result[["ss"]])),]
# Filter rows that contain "B"
ss_f <- model_result[["est_std"]][grep("^F", rownames(model_result[["est_std"]])),]
View(ss_f)
View(`F`)
# Calculate confidence intervals
confidence_intervals_f <- data.frame(
estimate = ss_f[, "Estimate"],
lower = ss_f[, "Estimate"] - 1.96 * ss_f[, "Std. Error"],
upper = ss_f[, "Estimate"] + 1.96 * ss_f[, "Std. Error"]
)
View(confidence_intervals_f)
ss_f$AgeGroup <- gsub("F", "Age group ", rownames(ss_f))
View(ss_f)
# Filter rows that contain "F"
ss_f <- model_result[["est_std"]][grep("^F", rownames(model_result[["est_std"]])),]
View(ss_f)
View(`F`)
# Filter rows that contain "F"
ss_f <- model_result[["est_std"]][grep("^F", rownames(model_result[["est_std"]])),]
# Calculate confidence intervals
confidence_intervals_f <- data.frame(
estimate = ss_f[, "Estimate"],
lower = ss_f[, "Estimate"] - 1.96 * ss_f[, "Std. Error"],
upper = ss_f[, "Estimate"] + 1.96 * ss_f[, "Std. Error"]
)
# Create AgeGroup and Year columns for ss_f
ss_f$AgeGroup <- rep(paste0("Age group ", seq_len(5)), each = 21)
View(ss_f)
ss_f <- model_result[["est_std"]][grep("^F", rownames(model_result[["est_std"]])),]
View(ss_f)
ss_f<-as.data.frame(ss_f)
View(ss_f)
# Create AgeGroup and Year columns for ss_f
ss_f$AgeGroup <- rep(paste0("Age group ", seq_len(5)), each = 21)
View(ss_f)
# Create AgeGroup and Year columns for ss_f
ss_f$AgeGroup <- rep(paste0("Age group ", seq_len(5)), times = 21)
View(ss_f)
nrow(F)
ncol(Year)
n(Year)
Year
Year[1]
Year[nrow(Year)]
nlen(Year)
nleng(Year)
nlength(Year)
num(Year)
tail(Year)
tail(Year,1)
Year[tail(Year,1)]
head(Year)
head(Year,1)
ss_f$Year <- rep(seq(head(Year,1), tail(Year,1)), times = 5)
View(ss_f)
ss_f$Year <- rep(Year, each = nrow(F))
View(ss_f)
confidence_intervals_f <- data.frame(
AgeGroup = ss_f$AgeGroup,
Year = ss_f$Year,
estimate = ss_f[, "Estimate"],
lower = ss_f[, "Estimate"] - 1.96 * ss_f[, "Std. Error"],
upper = ss_f[, "Estimate"] + 1.96 * ss_f[, "Std. Error"]
)
View(confidence_intervals_f)
library(ALSCL)
plot_fishing_mortality(a)
plot_fishing_mortality(a,se=T)
plot_fishing_mortality(a,se=T)+theme_bw()
ss_BL <- model_result[["est_std"]][grep("^BL", rownames(model_result[["est_std"]])),]
View(ss_BL)
# Filter rows that contain "F"
ss_BL <- model_result[["est_std"]][grep("BL", rownames(model_result[["est_std"]])),]
View(model_result)
model_result[["est_std"]]
model_result[["report"]][["BL"]]
View(ss)
View(ss)
NL <- model_result[["report"]][["NL"]]
View(NL)
ss_NL <- model_result[["est_std"]][grep("^NL", rownames(model_result[["est_std"]])),]
View(ss_NL)
# Calculate confidence intervals
confidence_intervals_NL <- data.frame(
estimate = ss_NL[, "Estimate"],
lower = ss_NL[, "Estimate"] - 1.96 * ss_NL[, "Std. Error"],
upper = ss_NL[, "Estimate"] + 1.96 * ss_NL[, "Std. Error"]
)
View(confidence_intervals_NL)
# Create AgeGroup and Year columns for ss_f
ss_NL$AgeGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
nrow(NL)
ncol(NL)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
View(ss_NL)
# Filter rows that contain "NL"
ss_NL <- model_result[["est_std"]][grep("^NL", rownames(model_result[["est_std"]])),]
# Calculate confidence intervals
confidence_intervals_NL <- data.frame(
estimate = ss_NL[, "Estimate"],
lower = ss_NL[, "Estimate"] - 1.96 * ss_NL[, "Std. Error"],
upper = ss_NL[, "Estimate"] + 1.96 * ss_NL[, "Std. Error"]
)
ss_NL<-as.data.frame(ss_NL)
View(ss_NL)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
View(ss_NL)
ss_NL$Year <- rep(Year, each = nrow(NL))
confidence_intervals_NL <- data.frame(
LengthGroup = ss_NL$LengthGroup,
Year = ss_NL$Year,
estimate = ss_NL[, "Estimate"],
lower = ss_NL[, "Estimate"] - 1.96 * ss_NL[, "Std. Error"],
upper = ss_NL[, "Estimate"] + 1.96 * ss_NL[, "Std. Error"]
)
ggplot2::ggplot(confidence_intervals_NL, aes(x = Year, y = estimate)) +
ggplot2::geom_line( ) +
ggplot2::geom_ribbon(aes(ymin = lower, ymax = upper),alpha=0.2) +
ggplot2::facet_wrap(~LengthGroup, ncol = 3, scales = "free") +
ggplot2::labs(x = "Year", y = "Relative abundance", title = "NL Over Years with Confidence Intervals") +
ggplot2::theme_minimal()
library(ALSCL)
plot_NL(a)
plot_NL(a,se=T)
library(ALSCL)
plot_NL(a,se=T)
View(ss)
plot_biomass(a)
a[["report"]][["N"]]
number <- model_result[["report"]][["N"]]
# Make sure it's a data frame
if(!is.data.frame(number)){
number <- as.data.frame(number)
}
# Add Year to the number data
number$Year <-  model_result[["year"]]
ss_n <- model_result[["est_std"]][grep("^N", rownames(model_result[["est_std"]])),]
View(ss_n)
ss_n <- model_result[["est_std"]][grep("^N^", rownames(model_result[["est_std"]])),]
# Filter rows that contain "N"
ss_n <- model_result[["est_std"]][grep("^N[^A]", rownames(model_result[["est_std"]])),]
View(ss_n)
plot_biomass(a,se=T)
# Filter rows that contain "N"
ss_n <- model_result[["est_std"]][grepl("^N(?!A|L)", rownames(model_result[["est_std"]]), perl = TRUE),]
# Calculate confidence intervals
confidence_intervals_n <- data.frame(
estimate = ss_n[, "Estimate"],
lower = ss_n[, "Estimate"] - 1.96 * ss_n[, "Std. Error"],
upper = ss_n[, "Estimate"] + 1.96 * ss_n[, "Std. Error"]
)
confidence_intervals_n$Year <-  model_result[["year"]]
library(ALSCL)
plot_NL(a)
library(ALSCL)
plot_NL(a)
plot_NL(a,se=T)
plot_number(a)
plot_number(a,se=T)
a[["est_std"]]
View(ss)
# Extract the NA data
NA<- model_result[["report"]][["NA"]]
a[["report"]][["NA"]]
# Extract the na data
na<- model_result[["report"]][["NA"]]
# Create AgeGroup variable from row names of na
AgeGroup <- paste0("Age group ", seq_len(nrow(na)))
# Convert matrix to data frame in long format
na_long <- reshape2::melt(na)
colnames(na_long) <- c("AgeGroup", "Year", "na")
na_long$Year <- Year[as.numeric(na_long$Year)]
na_long$AgeGroup <- AgeGroup[as.numeric(na_long$AgeGroup)]
View(na_long)
# Filter rows that contain "NA"
ss_na <- model_result[["est_std"]][grep("^NA", rownames(model_result[["est_std"]])),]
ss_na<-as.data.frame(ss_na)
# Calculate confidence intervals
confidence_intervals_na <- data.frame(
estimate = ss_na[, "Estimate"],
lower = ss_na[, "Estimate"] - 1.96 * ss_na[, "Std. Error"],
upper = ss_na[, "Estimate"] + 1.96 * ss_na[, "Std. Error"]
)
# Create AgeGroup and Year columns for ss_f
ss_na$AgeGroup <- rep(paste0("Age group ", seq_len(nrow(na))), times = ncol(na))
ss_na$Year <- rep(Year, each = nrow(na))
library(ALSCL)
plot_number_age(a)
library(ALSCL)
plot_number_age(a)
plot_number.age(a)
plot_number.age(a,se=T)
SSB <- model_result[["report"]][["SSB"]]
# Make sure it's a data frame
if(!is.data.frame(SSB)){
SSB <- as.data.frame(SSB)
}
# Add Year to the SSB data
SSB$Year <-  model_result[["year"]]
ss_ssb <- model_result[["est_std"]][grep("^SSB", rownames(model_result[["est_std"]])),]
library(ALSCL)
plot_SSB(a)
plot_SSB(a,se=T)
View(ss)
a[["report"]][["NL"]]
plot_NL(a)
# Extract the CN data
CN <- model_result[["report"]][["CN"]]
# Make sure it's a data frame
if(!is.data.frame(CN)){
CN <- as.data.frame(CN)
}
# Add Year to the CN data
CN$Year <-  model_result[["year"]]
ss_CN <- model_result[["est_std"]][grep("^CN", rownames(model_result[["est_std"]])),]
# Calculate confidence intervals
confidence_intervals_CN <- data.frame(
estimate = ss_CN[, "Estimate"],
lower = ss_CN[, "Estimate"] - 1.96 * ss_CN[, "Std. Error"],
upper = ss_CN[, "Estimate"] + 1.96 * ss_CN[, "Std. Error"]
)
confidence_intervals_CN$Year <-  model_result[["year"]]
View(confidence_intervals_CN)
View(ss)
library(ALSCL)
View(a)
View(a)
Linf <- 100  # 这是一个例子值，你可以替换成你的实际值
k <- 0.1  # 这是一个例子值，你可以替换成你的实际值
t0 <- 0  # 这是一个例子值，你可以替换成你的实际值
data <- data.frame(age = seq(0, 10, by = 0.1))  # 这里我们假设年龄范围是0到10岁
data <- data %>%
mutate(length = VB_func(Linf, k, t0, age))
ggplot(data, aes(x = age, y = length)) +
geom_line() +
labs(x = "Age", y = "Length", title = "Von Bertalanffy growth function") +
theme_minimal()
Linf=model_result[["report"]][["Linf"]]
k=model_result[["report"]][["vbk"]]
t0=model_result[["report"]][["t0"]]
VB_func <- function(Linf, k, t0, age) {
Lt = Linf * (1 - exp(-k * (age - t0)))
return(Lt)
}
# Create a data frame with a sequence of ages and the corresponding lengths
data <- data.frame(age = seq(0, 25, by = 1))
data <- data %>%
mutate(length = VB_func(Linf, k, t0, age))
ggplot(data, aes(x = age, y = length)) +
geom_line() +
labs(x = "Age", y = "Length", title = "Von Bertalanffy growth function") +
theme_minimal()
View(ss)
View(sdresult)
ss_k<-model_result[["est_std"]][grep("^log_vbk", rownames(model_result[["est_std"]])),]
ss_k
ss_logk<-model_result[["est_std"]][grep("^log_vbk", rownames(model_result[["est_std"]])),]
ss_k <- data.frame(
estimate = exp(ss_logk[, "Estimate"]),
lower = exp(ss_k[, "Estimate"] - 1.96 * ss_k[, "Std. Error"]),
upper = exp(ss_k[, "Estimate"] + 1.96 * ss_k[, "Std. Error"])
)
ss_logk<-model_result[["est_std"]][grep("^log_vbk", rownames(model_result[["est_std"]])),]
ss_logk[, "Estimate"]
ss_logk<-as.data.frame(ss_logk)
ss_k <- data.frame(
estimate = exp(ss_logk[, "Estimate"]),
lower = exp(ss_k[, "Estimate"] - 1.96 * ss_k[, "Std. Error"]),
upper = exp(ss_k[, "Estimate"] + 1.96 * ss_k[, "Std. Error"])
)
ss_k <- data.frame(
estimate = exp(ss_logk[, "Estimate"]),
lower = exp(ss_logk[, "Estimate"] - 1.96 * ss_logk[, "Std. Error"]),
upper = exp(ss_logk[, "Estimate"] + 1.96 * ss_logk[, "Std. Error"])
)
View(ss_logk)
ss_logk<-model_result[["est_std"]][grep("^log_vbk", rownames(model_result[["est_std"]])),]
ss_logk
ss_logk[, "Estimate"]
ss_logk<-as.data.frame(ss_logk)
ss_logk[ "Estimate",]
ss_k <- data.frame(
estimate = exp(ss_logk[ "Estimate",]),
lower = exp(ss_logk[ "Estimate",] - 1.96 * ss_logk[ "Std. Error",]),
upper = exp(ss_logk[ "Estimate",] + 1.96 * ss_logk["Std. Error", ])
)
View(ss_k)
plot_NL(a)
library(ALSCL)
plot_VB(a)
plot_VB(a,se=T)
library(ALSCL)
plot_VB(a,se=T)
library(ALSCL)
plot_VB(a)
library(ALSCL)
plot_VB(a)
plot_VB(a,se=T)
plot_VB(a,se=T,age_range = c(1,100))
plot_VB(a,se=T)
library(ALSCL)
plot_VB(a,se=T,age_range = c(1,100))
View(a)
a[["report"]][["std_index"]]
a[["report"]][["resid_index"]]
save.image("E:/Oceanic Fisheries Ecosystem Laboratory/krill/krill.RData")
plot_OP(a)
plot_OP(a,cl)
View(ss)
library(ALSCL)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
len_mid=c(15,23,28,33,38,43,48,53,58)
len_border=c(20,25,30,35,40,45,50,55)
M=0.3
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a<-run_acl(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid,len_border=len_border)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
Y=21
A=5
L=9
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
a<-run_acl(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid,len_border=len_border)
