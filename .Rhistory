logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
library("TMB")
compile("ACL_krill.cpp")
dyn.load("ACL_krill")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
obj$gr(opt$par)
cbind(opt$par,lower,upper)
report<-obj$report()
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
result <- list(obj = obj, opt = opt, report = report, bound_hit = bound_hit, bound_check = bound_check, converge = opt$message)
#dyn.unload("ACL")
dyn.unload(acl_dll_path)
dyn.unload("ACL_krill")
len_mid=c(15,23,28,33,38,43,48,53,58)
# stock assessment of krill
mat_func<-function(L50,L95,length)
{
b1=log(0.95/0.05)/(L95-L50)
bo = -L50*b1
logit_pt =  bo+b1*length
matp= exp(logit_pt)/(1+exp(logit_pt))
return(matp)
}
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
len_mid=c(15,23,28,33,38,43,48,53,58)
log_q<-log(mat_func(40,45,len_mid))
len_border=c(20,25,30,35,40,45,50,55)
age=c(1:5)
Y=21
A=5
L=9
weight=wgt[,2:22]
mat=mat[,2:22]
M=0.3
# prepare data
tmb.data<-list(
logN_at_len=logN_at_len,
na_matrix=na_matrix,
log_q=log_q,
len_border=len_border,
age=age,
Y=Y,
A=A,
L=L,
weight=as.matrix(weight),
mat=as.matrix(mat),
M=M
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
library("TMB")
compile("ACL_krill.cpp")
dyn.load("ACL_krill")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
obj$gr(opt$par)
cbind(opt$par,lower,upper)
report<-obj$report()
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
result <- list(obj = obj, opt = opt, report = report, bound_hit = bound_hit, bound_check = bound_check, converge = opt$message)
dyn.unload("ACL_krill")
results_list<-result
rm(obj, opt, report, result)
par(mfrow=c(5,5),mar=c(1,2,1,1))
for(i in 1:21){
plot(logN_at_len[,i],ylim=c(0,10))
lines(result$Elog_index[,i])
}
library(ALSCL)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
Y=21
A=5
L=9
# prepare data
tmb.data<-list(
logN_at_len=logN_at_len,
na_matrix=na_matrix,
log_q=log_q,
len_border=len_border,
age=age,
Y=Y,
A=A,
L=L,
weight=as.matrix(weight),
mat=as.matrix(mat),
M=M
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
len_mid=c(15,23,28,33,38,43,48,53,58)
a<-run_alscl1(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,user_len_mid = len_mid)
data.CatL=cl
results_list <- list()
nyear <- ncol(data.CatL)-1
rec.age=1
ages<-c(rec.age:(rec.age+nage-1))
nage=5
ages<-c(rec.age:(rec.age+nage-1))
nlen<-as.numeric(nrow(data.CatL))
na_matrix<-matrix(1,nrow=nrow(data.CatL),ncol=ncol(data.CatL)-1)
na_matrix[which(data.CatL[,2:ncol(data.CatL)]==0)]=0
data.wgt=wgt
weight=data.wgt[,2:ncol(data.CatL)]
data.mat=mat
mat=data.mat[,2:ncol(data.CatL)]
contains_special_char <- function(s) {
return(grepl("<|>", s))
}
range_to_bin <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
bin <- (last_number - first_number) / 2
return(bin)
}
bin <- range_to_bin(data.CatL[,1][2])
range_to_median <- function(range_str, isFirst = FALSE, isLast = FALSE, prev_range_str = "", next_range_str = "") {
if (contains_special_char(range_str)) {
parts <- strsplit(range_str, "-")[[1]]
single_number <- as.numeric(gsub("[^0-9]", "", parts[1]))
if (isFirst) {
next_parts <- strsplit(next_range_str, "-")[[1]]
next_first_number <- as.numeric(next_parts[1])
next_last_number <- as.numeric(next_parts[2])
bin <- (next_last_number - next_first_number) / 2
len_mid <- single_number + bin
} else {
prev_parts <- strsplit(prev_range_str, "-")[[1]]
prev_first_number <- as.numeric(prev_parts[1])
prev_last_number <- as.numeric(prev_parts[2])
bin <- (prev_last_number - prev_first_number) / 2
len_mid <- single_number - bin
}
} else {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
len_mid <- last_number - bin
}
return(round(len_mid))
}
if (is.null(user_len_mid)) {
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
}
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
log_q<-log(mat_func(sel_L50,sel_L95,len_mid))
sel_L50=40
sel_L95=45
log_q<-log(mat_func(sel_L50,sel_L95,len_mid))
extract_last_number <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
last_number <- as.numeric(parts[2])
return(last_number)
}
len_border <- sapply(data.CatL[,1], extract_last_number)
View(cl)
len_border <- sapply(data.CatL[-nrow(data.CatL),1], extract_last_number)
library(ALSCL)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
Y=21
A=5
L=9
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a<-run_alscl1(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map)
len_mid=c(15,23,28,33,38,43,48,53,58)
a<-run_alscl1(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid)
View(a)
library(ALSCL)
a<-run_alscl1(data.CatL=cl,data.wgt = wgt,data.mat = mat,rec.age=1,nage=5,M=0.3,sel_L50=40,sel_L95=45,parameters = parameters,parameters.L = parameters.L,parameters.U =parameters.U,map=map,len_mid=len_mid)
View(a)
View(a)
library(ALSCL)
library(ALSCL)
library(ALSCL)
library(ALSCL)
git init
View(a)
a[["bound_check"]]
par(mfrow=c(5,5),mar=c(1,2,1,1))
a$opt$iterations
a$obj$par
a$obj$fn()
a$opt$par
a$opt$objective
a$opt$message
data.CatL=cl
logN_at_len <- as.matrix(log(data.CatL[, 2:ncol(data.CatL)]+1e-5 ))
a[["report"]]
View(logN_at_len)
for(i in 1:21){
plot(logN_at_len[,i],ylim=c(0,10))
lines(result$Elog_index[,i])
}
for(i in 1:21){
plot(logN_at_len[,i],ylim=c(0,10))
lines(a$result$Elog_index[,i])
}
install.packages("ggridges")
library("ggridges")
# 加载数据集
data(mtcars)
# 创建山峰图
ggplot(mtcars, aes(x = mpg, y = as.factor(cyl), fill = as.factor(cyl))) +
geom_density_ridges(scale = 3) +
labs(title = "Mountain plot with ggplot2 and ggridges in R",
subtitle = "Example with mtcars dataset: Miles/(US) gallon by number of cylinders",
x = "Miles/(US) gallon",
y = "Number of cylinders") +
theme_ridges(font_size = 13, grid = TRUE) +
scale_fill_discrete(name = "Number of cylinders")
# 导入需要的库
library(ggplot2)
library(ggridges)
# 加载数据集
data(mtcars)
# 创建山峰图
ggplot(mtcars, aes(x = mpg, y = as.factor(cyl), fill = as.factor(cyl))) +
geom_density_ridges(scale = 3) +
labs(title = "Mountain plot with ggplot2 and ggridges in R",
subtitle = "Example with mtcars dataset: Miles/(US) gallon by number of cylinders",
x = "Miles/(US) gallon",
y = "Number of cylinders") +
theme_ridges(font_size = 13, grid = TRUE) +
scale_fill_discrete(name = "Number of cylinders")
library(tidyverse)
cl_l<-gather(cl,key="Year",value="length",X1991:X2011)
View(cl_l)
# 创建山峰图
ggplot() +
geom_density_ridges(data=cl_l, aes(x = length, y = Year, fill = as.factor(Year))) +
labs(title = "Mountain plot with ggplot2 and ggridges in R",
subtitle = "Example with mtcars dataset: Miles/(US) gallon by number of cylinders",
x = "Miles/(US) gallon",
y = "Number of cylinders") +
theme_ridges(font_size = 13, grid = TRUE) +
scale_fill_discrete(name = "Number of cylinders")
View(cl)
View(cl)
# 创建山峰图
ggplot() +
geom_density_ridges(data=cl_l, aes(x = length.mm, y = Year, fill = as.factor(length))) +
labs(title = "Mountain plot with ggplot2 and ggridges in R",
subtitle = "Example with mtcars dataset: Miles/(US) gallon by number of cylinders",
x = "Miles/(US) gallon",
y = "Number of cylinders") +
theme_ridges(font_size = 13, grid = TRUE) +
scale_fill_discrete(name = "Number of cylinders")
# 创建山峰图
ggplot() +
geom_density_ridges(data=cl_l, aes(x = length.mm., y = Year, fill = as.factor(length))) +
labs(title = "Mountain plot with ggplot2 and ggridges in R",
subtitle = "Example with mtcars dataset: Miles/(US) gallon by number of cylinders",
x = "Miles/(US) gallon",
y = "Number of cylinders") +
theme_ridges(font_size = 13, grid = TRUE) +
scale_fill_discrete(name = "Number of cylinders")
a[["report"]][["NL"]]
View(a)
a[["report"]][["F"]]
a[["report"]][["BL"]]
library(ALSCL)
