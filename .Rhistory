ungroup()
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(Year == min(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year)) %>%  # Add Year column
ungroup()
View(rho_text)
View(results)
# 运行ACL模型
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
year2 <- model_result[["year"]]
# 提取最后一年的参数值
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# 提取回溯性分析的年份
retrospectiveYear <- tail(model_result[["year"]], 1)
# 对于每个变量，计算rho值并将结果保存到data.frame中
for (variable_name in names(variables)) {
# 提取与回溯数据相同年份的原始数据
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
# 计算rho值
if(length(variables[[variable_name]]) != length(original_values)){
stop("Vectors are not of the same length.")
} else {
rho <- cor(variables[[variable_name]], original_values)
}
# 将结果保存到data.frame中
temp <- data.frame(Year = year2,
Variable = rep(variable_name, each = length(year2)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(retrospectiveYear, length(year2)),
Rho = rep(rho, length(year2)))
results <- rbind(results, temp)
}
results$RetrospectiveYear <- factor(results$RetrospectiveYear, levels = sort(unique(results$RetrospectiveYear), decreasing = TRUE))
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year)) %>%  # Add Year column
ungroup()
View(rho_text)
View(results)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year)) %>%  # Add Year column
ungroup()
View(results)
View(rho_text)
library(ACL)
b<-retro_acl(1,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
View(rho_text)
View(results)
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year) + (max(Year) - min(Year)) / 4) %>%  # Add Year column
ungroup()
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
summarise(Rho = first(Rho), Year = min(Year) + (max(Year) - min(Year)) / 4) %>%  # Add Year column
filter(Year == max(Year)) %>%
ungroup()
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear)
View(rho_text)
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year) + (max(Year) - min(Year)) / 4) %>%  # Add Year column
filter(Year == max(Year)) %>%
ungroup()
View(results)
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year1 == max(Year)) %>%
#filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = min(Year) + (max(Year) - min(Year)) / 4) %>%  # Add Year column
ungroup()
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year1 == max(Year))
# Calculate the position of x axis where we want to place the text
xpos <- min(results$Year) + (max(results$Year) - min(results$Year)) / 4
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable, RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
View(rho_text)
library(ACL)
b<-retro_acl(1,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable, RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
filter(Year == min(Year)) %>%
ungroup()
View(rho_text)
rho_text <- results %>%
group_by(Variable, RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
filter(Year == min(Year)) %>%
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable, RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
filter(RetrospectiveYear == min(RetrospectiveYear)) %>%
ungroup()
View(rho_text)
rho_text <- results %>%
filter(RetrospectiveYear == min(RetrospectiveYear)) %>%
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(RetrospectiveYear)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.nummeric(RetrospectiveYear))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
as.nummeric(RetrospectiveYear)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(results$RetrospectiveYear))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
results$RetrospectiveYear
as.numeric(results$RetrospectiveYear)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.integer(results$RetrospectiveYear))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable, RetrospectiveYear) %>%
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear, na.rm = TRUE))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear, na.rm = TRUE))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear, na.rm = TRUE))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
View(results)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear, na.rm = TRUE))) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho, na.rm = TRUE), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear), na.rm = TRUE)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
as.numeric(RetrospectiveYear)
rho_text <- results %>%
group_by(Variable)
View(rho_text)
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear), na.rm = TRUE))
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear), na.rm = TRUE)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear), na.rm = TRUE))
View(rho_text)
rho_text <- results %>%
group_by(Variable,RetrospectiveYear)
View(rho_text)
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(RetrospectiveYear == min(as.numeric(RetrospectiveYear)))
View(rho_text)
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(Year == max(Year,na.rm = TRUE))
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(RetrospectiveYear == min(as.numericas.character(RetrospectiveYear), na.rm = TRUE)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable,RetrospectiveYear) %>%
filter(RetrospectiveYear == min(as.numeric(as.character(RetrospectiveYear)), na.rm = TRUE)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
View(rho_text)
# Only display rho value of the last retrospective year for each Variable
rho_text <- results %>%
group_by(Variable) %>%
filter(RetrospectiveYear == min(as.numeric(as.character(RetrospectiveYear)), na.rm = TRUE)) %>%  # Only keep the smallest RetrospectiveYear
filter(Year == max(Year,na.rm = TRUE)) %>%
summarise(Rho = first(Rho), Year = xpos) %>%  # Add Year column
ungroup()
View(rho_text)
library(ACL)
b<-retro_acl(1,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
library(ACL)
library(ACL)
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
plot_ridges(a)
library(ACL)
plot_ridges(a)
plot_ridges(a)
library(ACL)
plot_ridges(a)
b<-retro_acl(1,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
b<-retro_acl(2,data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,plot=T)
b
nyear=2
i=1
year1 = ncol(data.CatL) - i
data.CatL=cl
year1 = ncol(data.CatL) - i
i=2
# Calculate the required year data
year1 = ncol(data.CatL) - i
data.wgt=wgt
data.mat=mat
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
rec.age=1
nage=7
M=0
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
sel_L50=27
sel_L95=36
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
year2 <- model_result[["year"]]
# Extracting the last year's parameter values
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
View(variables)
# Year of retrospective analysis extracted
retrospectiveYear <- tail(model_result[["year"]], 1)
results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
for (variable_name in names(variables)) {
temp_full <- data.frame(Year = year,
Variable = rep(variable_name, each = length(year)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(tail(year, 1), length(year)),
Rho = rep(NA, length(year)))  # Rho值对于完整数据集为NA
results <- rbind(results, temp_full)
}
results <- data.frame(Year = integer(), Variable = character(), Value = numeric(), RetrospectiveYear = integer(), Rho = numeric())
# Get the results of the full data model first
model_result <- run_acl(data.CatL = data.CatL,
data.wgt = data.wgt,
data.mat = data.mat,
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
# Extracting complete year data
year <- model_result[["year"]]
# Extracts complete B, SSB, Rec and N data
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Save the complete result to data.frame
for (variable_name in names(variables)) {
temp_full <- data.frame(Year = year,
Variable = rep(variable_name, each = length(year)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(tail(year, 1), length(year)),
Rho = rep(NA, length(year)))  # Rho值对于完整数据集为NA
results <- rbind(results, temp_full)
}
View(results)
results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
# For each variable, calculate the rho value and save the result to data.frame
for (variable_name in names(variables)) {
# Extracts the original data for the same year as the backtracked data
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
# Calculate rho value
if(length(variables[[variable_name]]) != length(original_values)){
stop("Vectors are not of the same length.")
} else {
# Use Mohn's rho instead of correlation
rho <- mean((variables[[variable_name]] - original_values) / original_values)
}
# Save the results to data.frame
temp <- data.frame(Year = year2,
Variable = rep(variable_name, each = length(year2)),
Value = variables[[variable_name]],
RetrospectiveYear = rep(retrospectiveYear, length(year2)),
Rho = rep(rho, length(year2)))
results <- rbind(results, temp)
}
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
variables[[variable_name]]
# Extracting the last year's parameter values
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Year of retrospective analysis extracted
retrospectiveYear <- tail(model_result[["year"]], 1)
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
variables[[variable_name]
]
# Running the ACL model
model_result <- run_acl(data.CatL = data.CatL[ , 1:year1],
data.wgt = data.wgt[ , 1:year1],
data.mat = data.mat[ , 1:year1],
rec.age, nage, M, sel_L50, sel_L95,
parameters, parameters.L, parameters.U, map, len_mid, len_border)
year2 <- model_result[["year"]]
# Extracting the last year's parameter values
variables <- list(
B = model_result[["report"]][["B"]],
Rec = model_result[["report"]][["Rec"]],
SSB = model_result[["report"]][["SSB"]],
N = model_result[["report"]][["N"]]
)
# Year of retrospective analysis extracted
retrospectiveYear <- tail(model_result[["year"]], 1)
variables[[variable_name]]
if(length(variables[[variable_name]]) != length(original_values)){
stop("Vectors are not of the same length.")
} else {
# Use Mohn's rho instead of correlation
rho <- mean((variables[[variable_name]] - original_values) / original_values)
}
# Extracts the original data for the same year as the backtracked data
original_values <- results[results$Year %in% year2 & results$Variable == variable_name, "Value"]
