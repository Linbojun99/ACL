library(FlatfishAgeDependent)
a<-initialize_params()
b<-calculate_bio_vars(a)
run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir = "E:\\sim")
library(FlatfishAgeDependent)
?run_stock_assessment
library(FlatfishAgeDependent)
run_stock_assessment()
c<-run_stock_assessment(a,iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
View(c)
?run_stock_assessment
?calculate_bio_vars
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
c<-run_stock_assessment(M=4,iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
library(FlatfishAgeDependent)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
library(FlatfishAgeDependent)
?run_stock_assessment
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
library(FlatfishAgeDependent)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
1
s
d
detach("package:FlatfishAgeDependent", unload = TRUE)
library(FlatfishAgeDependent)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E://sim",output_dir = "E://sim")
library(FlatfishAgeDependent)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E://sim",output_dir = "E://sim")
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E://sim",output_dir = "E://sim")
library(FlatfishAgeDependent)
stop
library(FlatfishAgeDependent)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E://sim")
create_parameters()
?create_parameters
d<-create_parameters()
View(d)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E://sim")
View(c)
library(FlatfishAgeDependent)
?run_stock_assessment
library(FlatfishAgeDependent)
?run_stock_assessment
library(FisherySurplusProduction)
detach("package:FisherySurplusProduction", unload = TRUE)
detach("package:FlatfishAgeDependent", unload = TRUE)
library(FlatfishAgeDependent)
?run_stock_assessment
library(FlatfishAgeDependent)
library(FlatfishAgeDependent)
#' @param sim_data_path A character string specifying the path to the folder containing the simulation data files (default is the current working directory).
#' @param output_dir Character, the directory where simulation results will be saved.(default is the current working directory).
#' @param parameters A list containing the custom initial values for the parameters (default is NULL).
#' @param parameters.L A list containing the custom lower bounds for the parameters (default is NULL).
#' @param parameters.U A list containing the custom upper bounds for the parameters (default is NULL).
#' @param map A list containing the custom values for the map elements (default is NULL).
#' @param M Numeric, natural mortality (default: 0.2)
#'
#' @return A list containing the results of the stock assessment model.
#' @export
run_stock_assessment <- function(iter_range = 4:100,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2) {
library(TMB)
acl_cpp_path <- system.file("extdata", "ACL.cpp", package = "FlatfishAgeDependent")
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
#compile(file = "ACL.cpp", "&>/tmp/logfile.log")
results_list <- list()
for(iter in iter_range) {
load(file.path(sim_data_path, paste0("sim_rep", iter)))
tmb.data=list(
logN_at_len = t(log(sim.data$SN_at_len)),
log_q = log(sim.data$q_surv),
len_border = (sim.data$len_mid + 1)[1:(sim.data$nlen-1)],
age = sim.data$ages,
Y = sim.data$nyear,
A = sim.data$nage,
L = sim.data$nlen,
weight = sim.data$weight,
mat=sim.data$mat,
M=M
)
#
custom_bounds_and_params <- create_parameters(parameters, parameters.L, parameters.U)
parameters <- custom_bounds_and_params$parameters
# random effects
parameters$ dev_log_R = rep(0,sim.data$nyear)
parameters$ dev_log_F = array(0,c(sim.data$nage,sim.data$nyear))
parameters$ dev_log_N0 = rep(0,(sim.data$nage-1))
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
# opt1<-nlminb(opt$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
# obj$gr(opt$par)
# cbind(opt$par,lower,upper)
report<-obj$report()
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
result <- list(obj = obj, opt = opt, report = report, bound_hit = bound_hit, bound_check = bound_check, converge = opt$message)
#dyn.unload("ACL")
dyn.unload(acl_dll_path)
save(result, file = file.path(output_dir, paste0("result_rep_", iter)))
results_list[[paste0("result_rep_", iter)]] <- result
rm(obj, opt, report, result)
}
return(results_list)
}
c<-run_stock_assessment(a,iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
m<-generate_map()
library(ALSCL)
library(ALSCL)
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
library(TMB)
library(ALSCL)
library(ALSCL)
c<-run_stock_assessment(iter_range = 4,sim_data_path = "E:\\sim",output_dir ="E:\\sim" )
View(c)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
len_mid=c(15,23,28,33,38,43,48,53,58)
log_q<-log(mat_func(40,45,len_mid))
len_border=c(20,25,30,35,40,45,50,55)
age=c(1:5)
# stock assessment of krill
mat_func<-function(L50,L95,length)
{
b1=log(0.95/0.05)/(L95-L50)
bo = -L50*b1
logit_pt =  bo+b1*length
matp= exp(logit_pt)/(1+exp(logit_pt))
return(matp)
}
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
len_mid=c(15,23,28,33,38,43,48,53,58)
log_q<-log(mat_func(40,45,len_mid))
len_border=c(20,25,30,35,40,45,50,55)
age=c(1:5)
Y=21
A=5
L=9
weight=wgt[,2:22]
mat=mat[,2:22]
M=0.3
# prepare data
tmb.data<-list(
logN_at_len=logN_at_len,
na_matrix=na_matrix,
log_q=log_q,
len_border=len_border,
age=age,
Y=Y,
A=A,
L=L,
weight=as.matrix(weight),
mat=as.matrix(mat),
M=M
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,tmb.data$Y),
dev_log_F = array(0,c(tmb.data$A,tmb.data$Y)),
dev_log_N0 = rep(0,(tmb.data$A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
library("TMB")
compile("ACL_krill.cpp")
dyn.load("ACL_krill")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
View(na_matrix)
View(cl)
View(cl)
ncol(cl)
library(ALSCL)
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
library(ALSCL)
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
acl_cpp_path <- system.file("extdata", "ACL_0.cpp", package = "ALSCL")
if (acl_cpp_path == "") {
stop("ACL_0.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
load("E:/Oceanic Fisheries Ecosystem Laboratory/stock assessment package/ALSCL/data/YTF.rda")
View(YTF)
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
library(ALSCL)
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
YTF[["len_border"]]
YTF[["len_lower"]]
YTF[["len_upper"]]
library(ALSCL)
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
acl_cpp_path <- system.file("extdata", "ACL_0.cpp", package = "ALSCL")
if (acl_cpp_path == "") {
stop("ACL_0.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
library(ALSCL)
a<-sim_alscl(iter_range = 4,sim_data_path = "E://sim",output_dir = "E://sim")
remove.packages("ALSCL")
library(ALSCL)
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
len_mid=c(15,23,28,33,38,43,48,53,58)
log_q<-log(mat_func(40,45,len_mid))
len_border=c(20,25,30,35,40,45,50,55)
age=c(1:5)
Y=21
A=5
L=9
weight=wgt[,2:22]
mat=mat[,2:22]
M=0.3
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,tmb.data$Y),
dev_log_F = array(0,c(tmb.data$A,tmb.data$Y)),
dev_log_N0 = rep(0,(tmb.data$A-1))
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a<-run_alscl(cl,wgt,mat,1,5,0.3,len_mid,40,45,parameters = parameters,parameters.L = parameters.L,parameters.U = parameters.U,map = map)
