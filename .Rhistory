cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-5mm-all.csv",header=T,sep=",")
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
library(ALSCL)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
Y=21
Y=21
A=5
L=9
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
library("TMB")
len_border=c(20,25,30,35,40,45,50,55)
len_mid=c(15,23,28,33,38,43,48,53,58)
b=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 5,M=0.3,sel_L50 = 40, sel_L95=45,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map ,len_mid =len_mid ,len_border =len_border)
b=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 5,M=0.3,sel_L50 = 40, sel_L95=45,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map ,len_mid =len_mid ,len_border =len_border)
library(ALSCL)
data.CatL=cl
data.wgt=wgt
data.mat=mat
rec.age=1
nage=5
M=0.3
sel_L50=40
sel_L95=45
library(TMB)
results_list <- list()
nyear <- ncol(data.CatL)-1
ages<-c(rec.age:(rec.age+nage-1))
nlen<-as.numeric(nrow(data.CatL))
na_matrix<-matrix(1,nrow=nrow(data.CatL),ncol=ncol(data.CatL)-1)
na_matrix[which(data.CatL[,2:ncol(data.CatL)]==0)]=0
weight=data.wgt[,2:ncol(data.CatL)]
mat=data.mat[,2:ncol(data.CatL)]
if (is.null(len_mid)) {
contains_special_char <- function(s) {
return(grepl("<|>", s))
}
range_to_bin <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
bin <- (last_number - first_number) / 2
return(bin)
}
bin <- range_to_bin(data.CatL[,1][2])
range_to_median <- function(range_str, isFirst = FALSE, isLast = FALSE, prev_range_str = "", next_range_str = "") {
if (contains_special_char(range_str)) {
parts <- strsplit(range_str, "-")[[1]]
single_number <- as.numeric(gsub("[^0-9]", "", parts[1]))
if (isFirst) {
next_parts <- strsplit(next_range_str, "-")[[1]]
next_first_number <- as.numeric(next_parts[1])
next_last_number <- as.numeric(next_parts[2])
bin <- (next_last_number - next_first_number) / 2
len_mid <- single_number + bin
} else {
prev_parts <- strsplit(prev_range_str, "-")[[1]]
prev_first_number <- as.numeric(prev_parts[1])
prev_last_number <- as.numeric(prev_parts[2])
bin <- (prev_last_number - prev_first_number) / 2
len_mid <- single_number - bin
}
} else {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
len_mid <- last_number - bin
}
return(round(len_mid))
}
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
}
else {
if (is.null(len_border)) {
extract_last_number <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
last_number <- as.numeric(parts[2])
return(last_number)
}
len_border <- sapply(data.CatL[-nrow(data.CatL),1], extract_last_number)
} else {
len_border <- len_border
}
if (is.null(len_mid)) {
contains_special_char <- function(s) {
return(grepl("<|>", s))
}
range_to_bin <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
bin <- (last_number - first_number) / 2
return(bin)
}
bin <- range_to_bin(data.CatL[,1][2])
range_to_median <- function(range_str, isFirst = FALSE, isLast = FALSE, prev_range_str = "", next_range_str = "") {
if (contains_special_char(range_str)) {
parts <- strsplit(range_str, "-")[[1]]
single_number <- as.numeric(gsub("[^0-9]", "", parts[1]))
if (isFirst) {
next_parts <- strsplit(next_range_str, "-")[[1]]
next_first_number <- as.numeric(next_parts[1])
next_last_number <- as.numeric(next_parts[2])
bin <- (next_last_number - next_first_number) / 2
len_mid <- single_number + bin
} else {
prev_parts <- strsplit(prev_range_str, "-")[[1]]
prev_first_number <- as.numeric(prev_parts[1])
prev_last_number <- as.numeric(prev_parts[2])
bin <- (prev_last_number - prev_first_number) / 2
len_mid <- single_number - bin
}
} else {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
len_mid <- last_number - bin
}
return(round(len_mid))
}
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
}
else {
if (is.null(len_mid)) {
contains_special_char <- function(s) {
return(grepl("<|>", s))
}
range_to_bin <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
bin <- (last_number - first_number) / 2
return(bin)
}
bin <- range_to_bin(data.CatL[,1][2])
range_to_median <- function(range_str, isFirst = FALSE, isLast = FALSE, prev_range_str = "", next_range_str = "") {
if (contains_special_char(range_str)) {
parts <- strsplit(range_str, "-")[[1]]
single_number <- as.numeric(gsub("[^0-9]", "", parts[1]))
if (isFirst) {
next_parts <- strsplit(next_range_str, "-")[[1]]
next_first_number <- as.numeric(next_parts[1])
next_last_number <- as.numeric(next_parts[2])
bin <- (next_last_number - next_first_number) / 2
len_mid <- single_number + bin
} else {
prev_parts <- strsplit(prev_range_str, "-")[[1]]
prev_first_number <- as.numeric(prev_parts[1])
prev_last_number <- as.numeric(prev_parts[2])
bin <- (prev_last_number - prev_first_number) / 2
len_mid <- single_number - bin
}
} else {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
len_mid <- last_number - bin
}
return(round(len_mid))
}
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
}
len_mid <- len_mid
else {
log_q<-log(mat_func(sel_L50,sel_L95,len_mid))
if (is.null(len_border)) {
extract_last_number <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
last_number <- as.numeric(parts[2])
return(last_number)
}
len_border <- sapply(data.CatL[-nrow(data.CatL),1], extract_last_number)
} else {
len_border <- len_border
}
acl_cpp_path <- system.file("extdata", "ACL0.cpp", package = "ALSCL")
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
logN_at_len <- as.matrix(log(data.CatL[, 2:ncol(data.CatL)]+1e-5 ))
tmb.data=list(
logN_at_len = logN_at_len,
na_matrix=na_matrix,
log_q = log_q,
len_border =len_border,
age = ages,
Y = nyear,
A = nage,
L = nlen,
weight = as.matrix(weight),
mat=as.matrix(mat),
M=M
)
View(tmb.data)
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
age=c(1:5)
Y=21
A=5
L=9
weight=wgt[,2:22]
mat=mat[,2:22]
M=0.3
mat<-read.table("mat-5mm-all.csv",header=T,sep=",")
mat=mat[,2:22]
# prepare data
tmb.data1<-list(
logN_at_len=logN_at_len,
na_matrix=na_matrix,
log_q=log_q,
len_border=len_border,
age=age,
Y=Y,
A=A,
L=L,
weight=as.matrix(weight),
mat=as.matrix(mat),
M=M
)
View(tmb.data1)
View(tmb.data)
#
custom_bounds_and_params <- create_parameters(parameters, parameters.L, parameters.U)
View(custom_bounds_and_params)
View(parameters)
View(parameters.L)
parameters <- custom_bounds_and_params$parameters
# random effects
parameters$ dev_log_R = rep(0,nyear)
parameters$ dev_log_F = array(0,c(nage,nyear))
parameters$ dev_log_N0 = rep(0,(nage-1))
View(parameters)
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL0.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,niyrandom=rnames,map=map,DLL="ACL0",inner.control=list(trace=F, maxit=500))
View(obj)
nyear
nage
parameters1 = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L1 = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U1 = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower1=unlist(parameters.L)
upper1=unlist(parameters.U)
map1 = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
obj1<-MakeADFun(tmb.data1,parameters1,random=rnames,map=map1,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
compile("ACL_krill.cpp")
dyn.load("ACL_krill")
obj1<-MakeADFun(tmb.data1,parameters1,random=rnames,map=map1,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
View(obj1)
View(obj)
View(obj1)
parameters <- custom_bounds_and_params$parameters
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL0.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,niyrandom=rnames,map=map,DLL="ACL0",inner.control=list(trace=F, maxit=500))
View(obj)
View(obj1)
parameters
parameters$ dev_log_N0 = rep(0,(nage-1))
parameters
# random effects
parameters$ dev_log_R = rep(0,nyear)
parameters$ dev_log_F = array(0,c(nage,nyear))
parameters$ dev_log_N0 = rep(0,(nage-1))
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL0.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,niyrandom=rnames,map=map,DLL="ACL0",inner.control=list(trace=F, maxit=500))
cat("\nRunning optimization with nlminb...\n")
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
obj1<-MakeADFun(tmb.data1,parameters1,random=rnames,map=map1,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
opt<-nlminb(obj1$par,obj1$fn,obj1$gr,lower=lower1,upper=upper1,control=list(trace=0,iter.max=2000,eval.max=10000))
View(tmb.data1)
View(tmb.data)
View(map1)
View(map)
View(tmb.data)
View(parameters)
View(parameters1)
View(parameters.L)
View(parameters.L1)
View(parameters.U)
View(parameters.U1)
View(obj)
View(obj1)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL0",inner.control=list(trace=F, maxit=500))
cat("\nRunning optimization with nlminb...\n")
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
?niyrandom
# opt1<-nlminb(opt$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
obj$gr(opt$par)
cbind(opt$par,lower,upper)
dyn.unload(acl_dll_path)
library(ALSCL)
load("E:/Oceanic Fisheries Ecosystem Laboratory/krill/ACL_krill.R.RData")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 5,M=0.3,sel_L50 = 40, sel_L95=45,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map ,len_mid =len_mid ,len_border =len_border)
View(a)
a[["final_outer_mgc"]]
sum(a[["final_outer_mgc"]])
0.0003047295
0.0003047295
mean(a[["final_outer_mgc"]])
a[["final_outer_mgc"]][length(a[["final_outer_mgc"]])-2]
a[["par_low_up"]]
a[["bound_hit"]]
library(sjPlot)
tab_df(a)
tab_df(a[["par_low_up"]])
df <- a[["par_low_up"]]
kdf<-kable(df)
library(knitr)
kdf<-kable(df)
kdf
df1<-a[["final_outer_mgc"]]
kable(df1)
a[["bound_hit"]]
a[["converge"]]
library(ALSCL)
diagnose_model(a)
a[["converge"]]
save.image("E:/Oceanic Fisheries Ecosystem Laboratory/krill/ACL_krill.R.RData")
