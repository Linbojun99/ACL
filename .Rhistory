dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
t0 = 1/60,
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = F)
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
rec.age = 1
nage= 7
M=0
sel_L50 = 27
sel_L95=36
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = F)
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
rec.age = 1
nage= 7
M=0
sel_L50 = 27
sel_L95=36
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
t0 = 1/60,
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border,output = F)
View(a)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
acl_cpp_path <- system.file("extdata", "ACL_sim.cpp", package = "ACL")
if (acl_cpp_path == "") {
stop("ACL_sim.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
acl_cpp_path <- system.file("extdata", "ACL.cpp", package = "ACL")
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
acl_cpp_path <- system.file("extdata", "ACL_sim.cpp", package = "ACL")
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
library(ACL)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
library(ACL)
###working direction
setwd("E://sim")
###Other user-defined preset parameters for simulation
#' Initialize parameters for the fish simulation
init_state_vars<-initialize_params()
##' Calculate biological and fishing variables
bio_fishing_vars<-sim_cal(init_state_vars)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
acl_cpp_path <- system.file("extdata", "ACL.cpp", package = "ACL")
dyn.unload(acl_dll_path)
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL_sim.cpp")
#
dyn.load(acl_dll_path)
dyn.unload(acl_dll_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL.cpp")
dyn.unload(acl_dll_path)
library(ACL)
#' Initialize parameters for the fish simulation
init_state_vars<-initialize_params()
##' Calculate biological and fishing variables
bio_fishing_vars<-sim_cal(init_state_vars)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
library(ACL)
###working direction
setwd("E://sim")
#' Initialize parameters for the fish simulation
init_state_vars<-initialize_params()
##' Calculate biological and fishing variables
bio_fishing_vars<-sim_cal(init_state_vars)
#' Simulate Fishery Dynamics for 100 simulations
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
detach("package:ACL", unload = TRUE)
library(ACL)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
###loading ACL
library(ACL)
###working direction
setwd("E://sim")
init_state_vars<-initialize_params()
##' Calculate biological and fishing variables
bio_fishing_vars<-sim_cal(init_state_vars)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
library(ACL)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
library(TMB)
acl_cpp_path <- system.file("extdata", "ACLsim.cpp", package = "ACL")
if (acl_cpp_path == "") {
stop("ACLsim.cpp not found in the package directory.")
}
# 编译ACL_sim.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
library(ACL)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
###working direction
setwd("E://sim")
###loading ACL
library(ACL)
Other user-defined preset parameters for simulation
init_state_vars<-initialize_params()
##' Calculate biological and fishing variables
bio_fishing_vars<-sim_cal(init_state_vars)
sim_acl_result <- sim_acl(iter_range = 4:100,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
View(sim_acl_result)
save.image("E:/sim/SIM.RData")
acl_cpp_path <- system.file("extdata", "ACLsim.cpp", package = "ACL")
if (acl_cpp_path == "") {
stop("ACLsim.cpp not found in the package directory.")
}
# 编译ACL_sim.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
results_list <- list()
iter=4
load(file.path(sim_data_path, paste0("sim_rep", iter)))
sim_data_path="E://sim"
load(file.path(sim_data_path, paste0("sim_rep", iter)))
na_matrix<-matrix(sim.data)
View(na_matrix)
na_matrix<-matrix(sim.data$SN_at_len)
View(na_matrix)
na_matrix<-matrix(1,sim.data$SN_at_len)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
na_matrix<-matrix(1,nrow=9,ncol=21)
View(cl)
View(sim.data)
sim.data[["SN_at_len"]]
sim.data$SN_at_len
sl<-sim.data$SN_at_len
na_matrix<-matrix(1,nrow=nrow(sim.data$SN_at_len),ncol=ncol(sim.data$SN_at_len))
View(sl)
na_matrix[which(sim.data==0)]=0
which(data.CatL[,2:ncol(data.CatL)]==0)
na_matrix[which(sim.data[,]==0)]=0
na_matrix[which(sim.data$SN_at_len[,]==0)]=0
View(na_matrix)
library(ACL)
sim_acl_result <- sim_acl(iter_range = 4,sim_data_path = ".",output_dir=".", parameters = NULL, parameters.L = NULL, parameters.U = NULL,map = NULL,M=0.2)
###working direction
setwd("E://sim")
acl_cpp_path <- system.file("extdata", "ACL.cpp", package = "ACL")
library(TMB)
library(ACL)
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
results_list <- list()
iter=4
load(file.path(sim_data_path, paste0("sim_rep", iter)))
sim_data_path="E://sim"
load(file.path(sim_data_path, paste0("sim_rep", iter)))
na_matrix<-matrix(1,nrow=nrow(sim.data$SN_at_len),ncol=ncol(sim.data$SN_at_len))
na_matrix[which(sim.data$SN_at_len[,]==0)]=0
M=0.2
tmb.data=list(
logN_at_len = t(log(sim.data$SN_at_len)),
log_q = log(sim.data$q_surv),
len_border = (sim.data$len_mid + 1)[1:(sim.data$nlen-1)],
na_matrix=na_matrix,
age = sim.data$ages,
Y = sim.data$nyear,
A = sim.data$nage,
L = sim.data$nlen,
weight = sim.data$weight,
mat=sim.data$mat,
M=M
)
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
na_matrix<-t(matrix(1,nrow=nrow(sim.data$SN_at_len),ncol=ncol(sim.data$SN_at_len)))
na_matrix[which(sim.data$SN_at_len[,]==0)]=0
tmb.data=list(
logN_at_len = t(log(sim.data$SN_at_len)),
log_q = log(sim.data$q_surv),
len_border = (sim.data$len_mid + 1)[1:(sim.data$nlen-1)],
na_matrix=na_matrix,
age = sim.data$ages,
Y = sim.data$nyear,
A = sim.data$nage,
L = sim.data$nlen,
weight = sim.data$weight,
mat=sim.data$mat,
M=M
)
library(ACL)
library(ACL)
system.file（
system.file()
library(ACL)
acl_cpp_path <- system.file("extdata", "ACL.cpp", package = "ACL")
# 编译ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
results_list <- list()
iter_range=4
sim_data_path="E://sim"
load(file.path(sim_data_path, paste0("sim_rep", iter)))
iter=4
load(file.path(sim_data_path, paste0("sim_rep", iter)))
na_matrix<-t(matrix(1,nrow=nrow(sim.data$SN_at_len),ncol=ncol(sim.data$SN_at_len)))
na_matrix[which(sim.data$SN_at_len[,]==0)]=0
M=0.2
tmb.data=list(
logN_at_len = t(log(sim.data$SN_at_len)),
log_q = log(sim.data$q_surv),
len_border = (sim.data$len_mid + 1)[1:(sim.data$nlen-1)],
na_matrix=na_matrix,
age = sim.data$ages,
Y = sim.data$nyear,
A = sim.data$nage,
L = sim.data$nlen,
weight = sim.data$weight,
mat=sim.data$mat,
M=M
)
custom_bounds_and_params<-create_parameters()
parameters <- custom_bounds_and_params$parameters
# random effects
parameters$ dev_log_R = rep(0,sim.data$nyear)
parameters$ dev_log_F = array(0,c(sim.data$nage,sim.data$nyear))
parameters$ dev_log_N0 = rep(0,(sim.data$nage-1))
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map=NULL
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL_sim")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL",inner.control=list(trace=F, maxit=500))
cat("\nRunning optimization with nlminb...\n")
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
# opt1<-nlminb(opt$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
# obj$gr(opt$par)
# cbind(opt$par,lower,upper)
report<-obj$report()
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
cat("\nRunning sdreport...\n")
sdresult<-sdreport(obj)
est_std<-summary(sdresult)
year=1:sim.data$nyear
result <- list(obj = obj, opt = opt, report = report,est_std=est_std, len_mid=sim.data$len_mid,year=year,bound_hit = bound_hit, bound_check = bound_check, converge = opt$message)
dyn.unload(acl_dll_path)
save(result, file = file.path(output_dir, paste0("result_rep_", iter)))
results_list[[paste0("result_rep_", iter)]] <- result
rm(obj, opt, report, result)
detach("package:ACL", unload = TRUE)
library(ACL)
