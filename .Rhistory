weight=data.wgt[,2:ncol(data.CatL)]
mat=data.mat[,2:ncol(data.CatL)]
# Check if there is only one value
contains_only_one_number <- function(s) {
return(!grepl("-", s))
}
# If there is only one value, use len_border
if (contains_only_one_number(data.CatL[,1][1])) {
len_mid <- len_border
log_q <- log(mat_func(sel_L50, sel_L95, len_mid))
} else {
if (is.null(len_mid)) {
contains_special_char <- function(s) {
return(grepl("<|>", s))
}
range_to_bin <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
bin <- (last_number - first_number) / 2
return(bin)
}
bin <- range_to_bin(data.CatL[,1][2])
range_to_median <- function(range_str, isFirst = FALSE, isLast = FALSE, prev_range_str = "", next_range_str = "") {
if (contains_special_char(range_str)) {
parts <- strsplit(range_str, "-")[[1]]
single_number <- as.numeric(gsub("[^0-9]", "", parts[1]))
if (isFirst) {
next_parts <- strsplit(next_range_str, "-")[[1]]
next_first_number <- as.numeric(next_parts[1])
next_last_number <- as.numeric(next_parts[2])
bin <- (next_last_number - next_first_number) / 2
len_mid <- single_number + bin
} else {
prev_parts <- strsplit(prev_range_str, "-")[[1]]
prev_first_number <- as.numeric(prev_parts[1])
prev_last_number <- as.numeric(prev_parts[2])
bin <- (prev_last_number - prev_first_number) / 2
len_mid <- single_number - bin
}
} else {
parts <- strsplit(range_str, "-")[[1]]
first_number <- as.numeric(parts[1])
last_number <- as.numeric(parts[2])
len_mid <- last_number - bin
}
return(round(len_mid))
}
len_mid <- sapply(seq_along(data.CatL[,1]), function(i) {
prev_range_str <- if (i > 1) data.CatL[,1][i - 1] else ""
next_range_str <- if (i < length(data.CatL[,1])) data.CatL[,1][i + 1] else ""
range_to_median(data.CatL[,1][i], isFirst = i == 1, isLast = i == length(data.CatL[,1]), prev_range_str = prev_range_str, next_range_str = next_range_str)
})
}
else {
len_mid <- len_mid
}
log_q<-log(mat_func(sel_L50,sel_L95,len_mid))
}
if (is.null(len_border)) {
extract_last_number <- function(range_str) {
parts <- strsplit(range_str, "-")[[1]]
last_number <- as.numeric(parts[2])
return(last_number)
}
len_border <- sapply(data.CatL[-nrow(data.CatL),1], extract_last_number)
} else {
len_border <- len_border
}
acl_cpp_path <- system.file("extdata", "ACL0.cpp", package = "ALSCL")
if (acl_cpp_path == "") {
stop("ACL.cpp not found in the package directory.")
}
# Compile ACL.cpp
compile(file = acl_cpp_path, "&> /tmp/logfile.log")
logN_at_len <- as.matrix(log(data.CatL[, 2:ncol(data.CatL)]+1e-5 ))
tmb.data=list(
logN_at_len = logN_at_len,
na_matrix=na_matrix,
log_q = log_q,
len_border =len_border,
age = ages,
Y = nyear,
A = nage,
L = nlen,
weight = as.matrix(weight),
mat=as.matrix(mat),
M=M
)
#
custom_bounds_and_params <- create_parameters(parameters, parameters.L, parameters.U)
parameters <- custom_bounds_and_params$parameters
# random effects
parameters$ dev_log_R = rep(0,nyear)
parameters$ dev_log_F = array(0,c(nage,nyear))
parameters$ dev_log_N0 = rep(0,(nage-1))
parameters.L <- custom_bounds_and_params$parameters.L
parameters.U <- custom_bounds_and_params$parameters.U
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map <- generate_map(map)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
#
acl_cpp_dir <- dirname(acl_cpp_path)
#
acl_dll_path <- file.path(acl_cpp_dir, "ACL0.dll")
#
dyn.load(acl_dll_path)
#dyn.load("ACL")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL0",inner.control=list(trace=F, maxit=500))
cat("\nRunning optimization with nlminb...\n")
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
# opt1<-nlminb(opt$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
final_outer_mgc<-obj$gr(opt$par)
par_low_up<- cbind(opt$par,lower,upper)
report<-obj$report()
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
cat("\nRunning sdreport...\n")
sdresult<-sdreport(obj)
est_std<-summary(sdresult)
cl_l <- tidyr::gather(data.CatL,key="Year",value="length",2:ncol(data.CatL))
year <- cl_l %>%
dplyr::mutate(Year = as.numeric(gsub("X", "", Year))) %>%
dplyr::distinct(Year) %>%
dplyr::pull(Year)
result <- list(obj = obj, opt = opt, report = report, est_std=est_std, year=year, len_mid=len_mid,   bound_hit = bound_hit, bound_check = bound_check, converge = opt$message,final_outer_mgc=final_outer_mgc,par_low_up=par_low_up)
#dyn.unload("ACL")
dyn.unload(acl_dll_path)
results_list<-result
rm(obj, opt, report, result)
View(results_list)
# Check output parameters
if (output==TRUE) {
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
output=T
# Check output parameters
if (output) {
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
if (output) {
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
# Check output parameters
if (output) {
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
dev.off()
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
# Check output parameters
if(plot){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
plot=TRUE
# Check output parameters
if(plot){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
}
# Check output parameters
if(plot){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
if(plot){
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
if(plot==TRUE){
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
if(plot==TRUE){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
dir()
if(plot==TRUE){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
if(p==TRUE){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
p==T
p=TRUE
if(p=TRUE){
if(p==TRUE){
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
}
if (!dir.exists("output"))
{
dir.create("output")
if (!dir.exists("output")) {
stop("Failed to create output directory.")
}
}
# Save the image in the output folder
png(filename="output/plot_abundance_N.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "N", line_size = 1.2, line_color = "red", se=T,line_type = "solid")
dev.off()
png(filename="output/plot_abundance_NA.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_abundance_NL.png",width = 16, height = 9, units = "in", res = 600)
plot_abundance(model_result=results_list, type = "NL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
library(ACL)
png(filename="output/plot_biomass_B.png",width = 16, height = 9, units = "in", res = 600)
plot_biomass(model_result=results_list, type = "B", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_biomass_BL.png",width = 16, height = 9, units = "in", res = 600)
plot_biomass(model_result=results_list, type = "BL", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
View(results_list)
results_list[["est_std"]]
e<-results_list[["est_std"]]
View(e)
png(filename="output/plot_catch_CN.png",width = 16, height = 9, units = "in", res = 600)
plot_catch(model_result=results_list, type = "CN", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
dev.off()
png(filename="output/plot_biomass_CNA.png",width = 16, height = 9, units = "in", res = 600)
plot_catch(model_result=results_list, type = "CNA", line_size = 1.2, line_color = "red", line_type = "solid",facet_ncol = NULL)
dev.off()
png(filename="output/plot_catch_CNA.png",width = 16, height = 9, units = "in", res = 600)
plot_catch(model_result=results_list, type = "CNA", line_size = 1.2, line_color = "red", line_type = "solid",facet_ncol = NULL)
dev.off()
plot_catch(model_result=results_list, type = "CNA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
png(filename="output/plot_CatL_length.png",width = 16, height = 9, units = "in", res = 600)
plot_CatL(model_result=results_list,type = "length", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
plot_CatL(model_result=results_list,type = "length", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
plot_CatL(model_result=results_list,type = "length", line_size = 1.2, line_color = "red", line_type = "solid",facet_ncol = NULL)
dev.off()
png(filename="output/plot_CatL_length.png",width = 16, height = 9, units = "in", res = 600)
plot_CatL(model_result=results_list,type = "length", line_size = 1.2, line_color = "red", line_type = "solid",facet_ncol = NULL)
dev.off()
plot_CatL(model_result=results_list,type = "length", line_size = 1.2, line_color = "red", line_type = "solid",facet_ncol = NULL)
dev.off()
plot_CatL(model_result=results_list,type = "length",facet_ncol = NULL)
dev.off()
dev.off()
plot_CatL(model_result=results_list,type = "length")
plot_catch(model_result=results_list, type = "CNA", line_size = 1.2, line_color = "red", line_type = "solid",se=T,facet_ncol = NULL)
plot_CatL(model_result=results_list,type = "length")
plot_CatL(model_result=results_list,type = "length",exp_transform = TRUE)
plot_CatL(model_result=results_list,type = "year")
plot_CatL(model_result=results_list,type = "length")
View(results_list)
library(ACL)
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
cl<-read.table("CatL-1mm-all.csv",header=T,sep=",")
wgt<-read.table("wgt-1mm-all.csv",header=T,sep=",")
mat<-read.table("mat-1mm-all.csv",header=T,sep=",")
age=c(1:7)
Y=21
A=7
L=49
rec.age = 1
nage= 7
M=0
sel_L50 = 27
sel_L95=36
len_border=c(12:60)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(60),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
log_Linf = log(40),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
log_Linf = log(70),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
#logit_log_F_y = factor(NA),
#logit_log_F_a = factor(NA),
#log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
a=run_acl(data.Cat=cl,data.wgt=wgt,data.mat=mat,rec.age = 1,nage= 7,M=0,sel_L50 = 27, sel_L95=36,parameters =parameters,parameters.L=parameters.L,parameters.U=parameters.U,map =map,len_border =len_border)
