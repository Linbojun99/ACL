nlength(temp_data)
length(temp_data)
View(temp_data)
nrow(temp_data)
temp_data$age <- 1:nrow(temp_data)
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][i,])
temp_data$LengthGroup <- paste("Length bin ", i)
temp_data$age <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
num_indices <- dim(model_result[["report"]][["resid_index"]])[1]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][i,])
temp_data$LengthGroup <- paste("Length bin ", i)
temp_data$age <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
View(plot_data)
num_indices <- dim(model_result[["report"]][["resid_index"]])[1]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][i,])
temp_data$LengthGroup <- paste("Length bin ", i)
temp_data$age <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
colnames(plot_data) <- c("residual", "LengthGroup","age")
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=residual~age, se=FALSE, color="blue", linetype=2, size=2) +
geom_hline(yintercept=0, color="red", size=2) +
facet_wrap(~LengthGroup, scales = "free_x")
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line()
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=2) +
geom_hline(yintercept=0, color="red", size=2) +
facet_wrap(~LengthGroup, scales = "free_x")
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=2) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~LengthGroup, scales = "free_x")
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~LengthGroup, scales = "free_x")
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~LengthGroup, scales = "free_x")+
theme_minimal()
ggplot(plot_data, aes(x=age, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~LengthGroup, scales = "free")+
theme_minimal()
model_result[["report"]][["resid_index"]]
?dim
length(model_result[["report"]][["resid_index"]])[1]
dim(model_result[["report"]][["resid_index"]])[2]
length(model_result[["report"]][["resid_index"]])
length(model_result[["report"]][["resid_index"]])[,1]
length(model_result[["report"]][["resid_index"]])[,1]
dim(model_result[["report"]][["resid_index"]])[,1]
(model_result[["report"]][["resid_index"]])[1]
nrow(model_result[["report"]][["resid_index"]])
i=1
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
model_result[["report"]][["resid_index"]]
temp_data$LengthGroup <- 1:ncol(temp_data)
View(temp_data)
temp_data$age <- paste("Age bin ", i)
View(temp_data)
View(plot_data)
View(temp_data)
ncol(temp_data)
1:nrow(temp_data)
temp_data$LengthGroup <- 1:nrow(temp_data)
num_indices <- nrow(model_result[["report"]][["resid_index"]])
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$AgeGroup <- paste("Age bin ", i)
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
colnames(plot_data) <- c("residual", "AgeGroup","length")
p <- ggplot(plot_data, aes(x=length, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~AgeGroup, scales = "free")+
theme_minimal()
p
dim(model_result[["report"]][["resid_index"]])[1]
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$AgeGroup <- paste("Age bin ", i)
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
colnames(plot_data) <- c("residual", "AgeGroup","length")
p <- ggplot(plot_data, aes(x=length, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~AgeGroup, scales = "free")+
theme_minimal()
p
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$AgeGroup <- factor(paste("Age bin ", i), levels=paste("Age bin ", 1:num_indices))
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
colnames(plot_data) <- c("residual", "AgeGroup","length")
p <- ggplot(plot_data, aes(x=length, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color="blue", linetype=2, size=1.5) +
geom_hline(yintercept=0, color="red", size=1) +
facet_wrap(~AgeGroup, scales = "free")+
theme_minimal()
p
# Extract the NL data
NL <- model_result[["report"]][["NL"]]
# Make sure it's a matrix
if(!is.matrix(NL)){
NL <- as.matrix(NL)
}
# Create Year variable from column names of NL (assuming columns are years)
Year <- model_result[["year"]]
# Create LengthGroup variable from row names of NL
LengthGroup <- paste0("Length bin ", seq_len(nrow(NL)))
LengthGroup
LengthGroup <- factor(paste("Length bin ", seq_len(nrow(NL))), levels=paste("Length bin ", 1:seq_len(nrow(NL))))
LengthGroup <- factor(paste("Length bin ", seq_len(nrow(NL))), levels=paste("Length bin ", seq_len(nrow(NL))))
LengthGroup
SBL <- model_result[["report"]][["SBL"]]
View(SBL)
library(ALSCL)
plot_residuals(a)
if(type="length")
plot_residuals(a,type="length")
plot_residuals(a,type="age")
library(ALSCL)
plot_residuals(a,type="age")
seq(1,dim(plot_data$length),1)
dim(plot_data$length)
dim(plot_data$length)[1]
num_indices <- dim(model_result[["report"]][["resid_index"]])[1]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][i,])
temp_data$LengthGroup <- factor(paste("Length bin ", i), levels=paste("Length bin ", 1:num_indices))
temp_data$age <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
colnames(plot_data) <- c("residual", "LengthGroup","age")
dim(plot_data$length)[1]
View(plot_data)
dim(plot_data$LengthGroup)
plot_data$LengthGroup
dim(plot_data$LengthGroup)[1]
dim(plot_data$age)[1]
dim(plot_data$age)
length(plot_data$age)
ncol(plot_data$age)
nrow(plot_data$age)
plot_number_age(a)
plot_number(a)
plot_number_age(a)
plot_number(a)
library(ALSCL)
plot_abundance(a)
plot_abundance(a,type="N")
plot_abundance(a,type="NA")
plot_abundance(a,type="NA",se=T)
plot_NL(a)
plot_NL(a,se=T)
# Filter rows that contain "NL"
ss_NL <- model_result[["est_std"]][grep("^NL", rownames(model_result[["est_std"]])),]
ss_NL<-as.data.frame(ss_NL)
# Calculate confidence intervals
confidence_intervals_NL <- data.frame(
estimate = ss_NL[, "Estimate"],
lower = ss_NL[, "Estimate"] - 1.96 * ss_NL[, "Std. Error"],
upper = ss_NL[, "Estimate"] + 1.96 * ss_NL[, "Std. Error"]
)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- factor(rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL)), levels=paste("Length bin ", seq_len(nrow(NL))))
View(ss_NL)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
View(ss_NL)
ss_NL$LengthGroup <- factor(paste("Length bin ", seq_len(nrow(NL))), levels=paste("Length bin ", seq_len(nrow(NL))))
View(ss_NL)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
# Filter rows that contain "NL"
ss_NL <- model_result[["est_std"]][grep("^NL", rownames(model_result[["est_std"]])),]
ss_NL<-as.data.frame(ss_NL)
# Calculate confidence intervals
confidence_intervals_NL <- data.frame(
estimate = ss_NL[, "Estimate"],
lower = ss_NL[, "Estimate"] - 1.96 * ss_NL[, "Std. Error"],
upper = ss_NL[, "Estimate"] + 1.96 * ss_NL[, "Std. Error"]
)
# Create LengthGroup and Year columns for ss_NL
ss_NL$LengthGroup <- rep(paste0("Lenth bin ", seq_len(nrow(NL))), times = ncol(NL))
ss_NL$LengthGroup <- factor(paste("Length bin ", seq_len(nrow(NL))), levels=paste("Length bin ", seq_len(nrow(NL))))
NL <- model_result[["report"]][["NL"]]
View(NL)
# Make sure it's a matrix
if(!is.matrix(NL)){
NL <- as.matrix(NL)
}
plot_NL(a)
plot_yearly_length_distributions(a)
View(a)
cl<-read.table("CatL-5mm-all.csv",header=T,sep=",")
logN_at_len<-as.matrix(log(cl[,2:22]+1e-5))
na_matrix<-matrix(1,nrow=9,ncol=21)
na_matrix[which(cl[,2:22]==0)]=0
len_mid=c(15,23,28,33,38,43,48,53,58)
log_q<-log(mat_func(40,45,len_mid))
len_border=c(20,25,30,35,40,45,50,55)
age=c(1:5)
Y=21
A=5
L=9
weight=wgt[,2:22]
mat=mat[,2:22]
M=0.3
# prepare data
tmb.data<-list(
logN_at_len=logN_at_len,
na_matrix=na_matrix,
log_q=log_q,
len_border=len_border,
age=age,
Y=Y,
A=A,
L=L,
weight=as.matrix(weight),
mat=as.matrix(mat),
M=M
)
parameters = list(
log_init_Z = 0.5,
log_std_log_N0 = log(1),
mean_log_R = 5,
log_std_log_R = log(1),
logit_log_R = log(0.01/0.99),
mean_log_F = log(0.3),
log_std_log_F = log(1),
logit_log_F_y = log(0.75/0.25),
logit_log_F_a = log(0.75/0.25),
log_vbk = log(0.3),
log_Linf = log(90),
log_t0 = log(1/60),
log_cv_len = log(0.3),
log_std_index = log(0.1),
# random effects
dev_log_R = rep(0,Y),
dev_log_F = array(0,c(A,Y)),
dev_log_N0 = rep(0,(A-1))
)
parameters.L = list(
# fixed effects
log_init_Z = log(0.01),
log_std_log_N0 = -Inf,
mean_log_R = log(10),
log_std_log_R = log(0.01),
logit_log_R = -30,
mean_log_F = log(0.01),
#log_std_log_F = log(0.01),
logit_log_F_y = -10,
logit_log_F_a = -10,
log_vbk = log(0.1),
#log_Linf = log(50),
#log_t0 = -20,
log_cv_len = log(0.01),
log_std_index = log(0.01)
)
parameters.U = list(
# fixed effects
log_init_Z = log(10),
log_std_log_N0 = log(10),
mean_log_R = 20,
log_std_log_R = log(10),
logit_log_R = 20,
mean_log_F = log(2),
#log_std_log_F = log(10),
logit_log_F_y = 20,
logit_log_F_a = 10,
log_vbk = log(1),
#log_Linf = log(100),
#log_t0 = 0,
log_cv_len = log(1),
log_std_index = log(1)
)
lower=unlist(parameters.L)
upper=unlist(parameters.U)
map = list(
#log_std_log_N0 = factor(NA),
#log_std_log_R = factor(NA),
log_std_log_F = factor(NA),
log_Linf=factor(NA),
log_t0=factor(NA)
#log_std_index=factor(NA)
)
rnames=c("dev_log_R","dev_log_F","dev_log_N0")
compile("ACL_krill.cpp")
# input data
setwd("E:\\Oceanic Fisheries Ecosystem Laboratory\\krill")
compile("ACL_krill.cpp")
dyn.load("ACL_krill")
obj<-MakeADFun(tmb.data,parameters,random=rnames,map=map,DLL="ACL_krill",inner.control=list(trace=F, maxit=500))
opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper,control=list(trace=0,iter.max=2000,eval.max=10000))
obj$gr(opt$par)
cbind(opt$par,lower,upper)
report<-obj$report()
View(report)
bound_check<-c((as.vector(opt$par)-as.vector(lower)),(as.vector(upper)-as.vector(opt$par)))
bound_hit<-min(bound_check)==0
result <- list(obj = obj, opt = opt, report = report, bound_hit = bound_hit, bound_check = bound_check, converge = opt$message)
View(result)
outermgc <- obj$gr(opt$par)
outermgc
sum(outermgc)
df <- data.frame(outermgc, lower, upper)
View(df)
df <- data.frame(opt$par, lower, upper)
View(df)
print(df)
library(knitr)
kable(df)
write.csv(df, file = "df.csv")
sdresult<-sdreport(obj)
?sdreport
results_list<-result
View(results_list)
kdf<-kable(df)
result <- list(obj = obj, opt = opt, report = report, bound_hit = bound_hit, bound_check = bound_check, converge = opt$message,kdf=kdf)
results_list<-result
View(results_list)
results_list[["kdf"]]
results_list[["obj"]][["env"]][[".data"]][["logN_at_len"]]
results_list[["obj"]][["env"]][["data"]][["log_q"]]
View(a)
a[["obj"]][["env"]][["data"]][["log_q"]]
plot_fishing_mortality(a)
# Extract the F data
F<- model_result[["report"]][["F"]]
View(`F`)
model_result[["report"]]
plot_residuals(a)
plot_residuals(a,type="age")
temp_data$Year <- model_result[["year"]]
View(temp_data)
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$Year <- model_result[["year"]]
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$Year <- model_result[["year"]]
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
View(temp_data)
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
num_indices
i=1
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
View(temp_data)
temp_data$AgeGroup <- factor(paste("Age bin ", i), levels=paste("Age bin ", 1:num_indices))
View(temp_data)
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$AgeGroup <- factor(paste("Age bin ", i), levels=paste("Age bin ", 1:num_indices))
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
View(plot_data)
num_indices <-dim(model_result[["report"]][["resid_index"]])[2]
plot_data <- data.frame()
for(i in seq_len(num_indices)){
temp_data <- as.data.frame(model_result[["report"]][["resid_index"]][,i])
temp_data$length <- 1:nrow(temp_data)
plot_data <- rbind(plot_data, temp_data)
}
View(plot_data)
(model_result[["report"]][["resid_index"]]
)
# Define the data
resid_index <- model_result[["report"]][["resid_index"]]
year <- model_result[["year"]]
# Transform the matrix into a data frame and add column names
df <- as.data.frame(resid_index)
colnames(df) <- year
len_mid <- model_result[["len_mid"]]
df$len_mid <- len_mid
# Reshape the data from wide to long format
df_long <- df %>%
tidyr::pivot_longer(-len_mid, names_to = "year", values_to = "Abundance")
View(df_long)
# Reshape the data from wide to long format
df_long <- df %>%
tidyr::pivot_longer(-len_mid, names_to = "year", values_to = "residuals")
colnames(plot_data) <- c("length", "Year","residual")
colnames(df_long) <- c("length", "Year","residual")
ggplot(df_long, aes(x=length, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, color=smooth_color, linetype=2) +
geom_hline(yintercept=0) +
facet_wrap(~Year)+
theme_minimal()
ggplot(df_long, aes(x=length, y=residual)) +
geom_line() +
geom_smooth(method="loess", formula=y~x, se=FALSE, linetype=2) +
geom_hline(yintercept=0) +
facet_wrap(~Year)+
theme_minimal()
model_result[["report"]][["F"]]
plot_fishing_mortality(a)
model_result[["report"]]
plot_abundance(a,type="NA")
library(ALSCL)
plot_abundance(a,type="NA")
plot_residuals(a,type="year")
plot_residuals(a,type="length")
plot_residuals(a,type="year")
plot_NL(a)
library(ALSCL)
plot_abundance(a,type="NL")
plot_abundance(a,type="NA")
plot_BL(a)
plot_biomass()
plot_biomass(a)
# Extract the BL data
BL <- model_result[["report"]][["BL"]]
BL
biomass <- model_result[["report"]][["B"]]
biomass
sum(BL[,1])
View(std)
View(a)
library(ALSCL)
plot_biomass(a)
plot_biomass(a,type=="B")
plot_biomass(a,type="B")
plot_biomass(a,type="BL")
plot_biomass(a,type="BL",se=T)
plot_SBL(a)
plot_SSB(a)
SBL <- model_result[["report"]][["SBL"]]
SSB_data <- model_result[["report"]][["SSB"]]
SSB_data
SBL
sum(SBL[,1])
CN <- model_result[["report"]][["CN"]]
CN
CNA<- model_result[["report"]][["CNA"]]
CNA
sum(CNA[1,])
sum(CNA[,1])
plot_CNA(a)
plot_CN(a)
plot_yearly_length_distributions(a)
plot_OP(a,cl)
a[["obj"]][["env"]][[".data"]][["logN_at_len"]]
logN_at_len<-model_result[["obj"]][["env"]][[".data"]][["logN_at_len"]]
# Extract the Elog_index data
Elog_index <- model_result[["report"]][["Elog_index"]]
# Make sure it's a matrix
if(!is.matrix(Elog_index)){
Elog_index <- as.matrix(Elog_index)
}
# Create LengthGroup variable from row names of Elog_index
LengthGroup <- paste0("Length bin ", seq_len(nrow(Elog_index)))
LengthGroup <- factor(paste("Length bin ", seq_len(nrow(Elog_index))), levels=paste("Length bin ", seq_len(nrow(Elog_index))))
# Convert matrix to data frame in long format
Elog_index_long <- reshape2::melt(Elog_index)
colnames(Elog_index_long) <- c("LengthGroup", "Year", "Count")
View(Elog_index_long)
Year <-model_result[["year"]]
Elog_index_long$Year <- Year[match(Elog_index_long$Year, 1:length(Year))]
View(Elog_index_long)
plot_yearly_length_distributions(a)
plot_OP(a,cl)
library(ALSCL)
plot_CN(a)
plot_catch(a)
